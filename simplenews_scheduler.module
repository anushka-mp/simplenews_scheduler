<?php

/**
 * @file
 * Simplenews Scheduler module allows a schedule to be set
 * for sending (and resending) a Simplenews item.
 */

/**
 * NEWSLETTER SEND COMMAND
 */
define('SIMPLENEWS_COMMAND_SEND_SCHEDULE', 4);
define('SIMPLENEWS_COMMAND_SEND_NONE', 5);

/**
 * Implements hook_permission().
 */
function simplenews_scheduler_permission() {
  return array(
    'overview scheduled newsletters' => array(
      'title' => t('View scheduled newsletters'),
      'description' => t('Access overview page for scheduled newsletters.'),
    ),
    'send scheduled newsletters' => array(
      'title' => t('Send scheduled newsletters'),
      'description' => t('Allows users to use scheduled newsletter sending option.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function simplenews_scheduler_menu() {
  $items = array();

  $items["node/%node/editions"] = array(
    'title' => 'Newsletter Editions',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'page callback' => 'simplenews_scheduler_node_page',
    'page arguments' => array(1),
    'access callback' => '_simplenews_scheduler_tab_permission',
    'access arguments' => array(1),
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @todo replace the "This newsletter has been sent" checkbox of simplenews module
 * by a message like "Last edition of this newsletter was sent at 12.12.2012"
 */
function simplenews_scheduler_form_simplenews_node_tab_send_form_alter(&$form, &$form_state) {
  global $user;
  $node = node_load($form['nid']['#value']);

  // Add schedule settings to the newsletter edit form.
  if (isset($form['simplenews']) && user_access('send scheduled newsletters') && !isset($node->simplenews_scheduler_edition)) {
    // Set the default values.
    $form['#submit'][] = "simplenews_scheduler_submit";

    $scheduler = array();
    $record = db_select('simplenews_scheduler', 's')
      ->fields('s')
      ->condition('nid', arg(1))
      ->execute()
      ->fetchAssoc();

    if (!empty($record)) {
      $scheduler = $record;
    }
    else {
      $scheduler['activated'] = 0;
    }

    // check prevents php notice if newsletter was sent and only a checkbox appears in the form
    if (isset($form['simplenews']['send'])) {
      $form['simplenews']['send']['#options'] += array(
        SIMPLENEWS_COMMAND_SEND_SCHEDULE => t('Send newsletter according to schedule'),
        SIMPLENEWS_COMMAND_SEND_NONE => t("Stop newsletter schedule"),
      );
      $form['simplenews']['send']['#default_value'] = ($scheduler['activated'] == 1) ? SIMPLENEWS_COMMAND_SEND_SCHEDULE : variable_get('simplenews_send', SIMPLENEWS_COMMAND_SEND_NONE);
    }

    // Display settings only if this is not an edition.
    if (!isset($node->simplenews_scheduler_edition)) {
      $form['simplenews']['scheduler'] = array(
        '#type' => 'fieldset',
        '#title' => t('Schedule details'),
        '#attributes' => array('class' => array('schedule-info')),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#states' => array(
          'visible' => array(':input[name="simplenews[send]"]' => array('value' => (string) SIMPLENEWS_COMMAND_SEND_SCHEDULE)),
        ),
      );

      // If there is no default value, use the current time for start.
      $start_date = !empty($scheduler['start_date']) ? $scheduler['start_date'] : REQUEST_TIME;
      // and Today + 2 years for stop, that should be enough.
      $stop_date = !empty($scheduler['stop_date']) ? $scheduler['stop_date'] : time() + 2 * 365 * 24 * 60 * 60;

      $form['simplenews']['scheduler']['start_date'] = array(
        '#type' => 'date_select',
        '#title' => t('Start sending on'),
        '#default_value' => date('Y-m-d H:i', $start_date),
        '#required' => TRUE,
        '#date_format' => 'Y-m-d H:i',
        '#date_label_position' => 'within',
        '#date_year_range' => '-0:+3',
        '#description' => t('Intervals work by creating a new node at the
          desired time and marking this to be sent, ensure
          you have your <a href="@site">site timezones</a>
          configured and <a href="@user">user timezone</a>
          configured.', array('@site' => url('admin/config/date-time'), '@user' => url('user/' . $user->uid . '/edit'))),
      );

      $intervals = array(
        'hour' => t('Hour'),
        'day' => t('Day'),
        'week' => t('Week'),
        'month' => t('Month'),
      );

      $form['simplenews']['scheduler']['interval'] = array(
        '#type' => 'select',
        '#title' => t('Sending interval'),
        '#options' => $intervals,
        '#description' => t('Interval to send at'),
        '#default_value' => !empty($scheduler['send_interval']) ? $scheduler['send_interval'] : 'week',
      );

      $form['simplenews']['scheduler']['frequency'] = array(
        '#type' => 'textfield',
        '#title' => t('Interval frequency'),
        '#size' => 5,
        '#default_value' => !empty($scheduler['interval_frequency']) ? $scheduler['interval_frequency'] : 1,
        '#description' => t('Set the number of Intervals between newsletter transmission.'),
      );

      $stoptypes = array(
        t('Never'),
        t('On a given date'),
        t('After a maximum number of editions')
      );

      $form['simplenews']['scheduler']['stoptype'] = array(
        '#type' => 'radios',
        '#title' => t('Stop sending'),
        '#options' => $stoptypes,
        '#default_value' => !empty($scheduler['stop_type']) ? $scheduler['stop_type'] : 0,
        '#attributes' => array('class' => array('simplenews-command-stop')),
      );

      $form['simplenews']['scheduler']['stop_edition'] = array(
        '#type' => 'textfield',
        '#default_value' => isset($scheduler['stop_edition']) ? $scheduler['stop_edition'] : 0,
        '#size' => 5,
        '#maxlength' => 5,
        '#required' => TRUE,
        '#description' => t('The maximum number of editions which should be sent.'),
        '#states' => array(
          'visible' => array(':input[name="simplenews[scheduler][stoptype]"]' => array('value' => (string) 2)),
        ),
      );

      $form['simplenews']['scheduler']['stop_date'] = array(
        '#type' => 'date_select',
        '#title' => t('Stop sending on'),
        '#default_value' => date('Y-m-d H:i', $stop_date),
        '#required' => TRUE,
        '#date_format' => 'Y-m-d H:i',
        '#date_label_position' => 'within',
        '#date_year_range' => '-0:+3',
        '#description' => t('The date when the last sent newsletter will be sent.'),
        '#states' => array(
          'visible' => array(':input[name="simplenews[scheduler][stoptype]"]' => array('value' => (string) 1)),
        ),
      );

      $form['simplenews']['scheduler']['php_eval'] = array(
        '#type' => 'textarea',
        '#title' => t('Additionally only create newsletter edition if the following code returns true'),
        '#default_value' => isset($scheduler['php_eval']) ? $scheduler['php_eval'] : '',
        '#required' => FALSE,
        '#description' => t('Additionally evaluate the following PHP code and only issue the newsletter edition if it returns true. Do not include &lt;?php ?&gt; tags.'),
      );
      $form['simplenews']['scheduler']['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title pattern for new edition nodes'),
        '#description' => t('New edition nodes will have their title set to the above string, with tokens replaced.'),
        '#required' => TRUE,
        '#default_value' => isset($scheduler['title']) ? $scheduler['title'] : '[node:title]',
      );
      $form['simplenews']['scheduler']['token_help'] = array(
        '#title' => t('Replacement patterns'),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['simplenews']['scheduler']['token_help']['help'] = array(
        '#theme' => 'token_tree',
        '#token_types' => array('node'),
      );

      $form['simplenews']['scheduler']['activated'] = array(
        '#type' => 'value',
        '#value' => $scheduler['activated'],
      );
    }
    else {
      // This is a newsletter edition.
      $title .= t('This node is part of a scheduled newsletter configuration. View the original newsletter <a href="@parent">here</a>.', array('@parent' => url('node/' . $node->simplenews_scheduler_edition['pid'])));
      $form['simplenews']['none']['#title'] = array(
        'type' => 'item',
        '#title' => $title,
      );
    }
  }
}

/**
 * Additional submit handler for the node_tab_send_form of simplenews.
 */
function simplenews_scheduler_submit($form, &$form_state) {
  $nid = $form_state['values']['nid'];
  $node = node_load($nid);

  // Get Scheduler values from Simplenews.
  $send = $form_state['values']['simplenews']['send'];

  $stoptype = $form_state['values']['simplenews']['scheduler']['stoptype'];
  $start_date = strtotime($form_state['values']['simplenews']['scheduler']['start_date']);
  $stop_date = ($stoptype == 1) ? strtotime($form_state['values']['simplenews']['scheduler']['stop_date']) : 0;

  $record = array(
    'nid'                => $nid,
    'activated'          => $send == SIMPLENEWS_COMMAND_SEND_SCHEDULE ? 1 : 0,
    'send_interval'      => $form_state['values']['simplenews']['scheduler']['interval'],
    'interval_frequency' => $form_state['values']['simplenews']['scheduler']['frequency'],
    'start_date'         => $start_date,
    'stop_type'          => $stoptype,
    'stop_date'          => $stop_date,
    'stop_edition'       => $form_state['values']['simplenews']['scheduler']['stop_edition'],
    'php_eval'           => $form_state['values']['simplenews']['scheduler']['php_eval'],
    'title'              => $form_state['values']['simplenews']['scheduler']['title'],
  );

  // Update scheduler record.
  $query = db_merge('simplenews_scheduler');
  $query->key(array(
      'nid' => $nid,
    ))
    ->fields($record)
    ->execute();

  if (!$query) {
    drupal_set_message(t('Saving or updating schedule settings for <em>@title</em> has been unsuccessful.', array(
        '@title' => $node->title,
      )), 'error');
  }
  else {
    drupal_set_message(t('Newsletter Schedule preferences saved'));
  }
}

/**
 * Implements hook_node_load().
 */
function simplenews_scheduler_node_load($nodes, $types) {
  $nids = array_keys($nodes);

  $result = db_select('simplenews_scheduler', 's')
    ->fields('s')
    ->condition('nid', $nids, 'IN')
    ->execute()
    ->fetchAll();

  foreach ($result as $key => $record) {
    $nodes[$record->nid]->simplenews_scheduler = $record;
  }

  $result = db_select('simplenews_scheduler_editions', 's')
    ->fields('s')
    ->condition('eid', $nids, 'IN')
    ->execute()
    ->fetchAll();

  foreach ($result as $key => $record) {
    $nodes[$record->eid]->simplenews_scheduler_edition = $record;
    $nodes[$record->eid]->is_edition = TRUE;
    $nodes[$record->eid]->simplenews_edition_parent = $record->pid;
  }
}

/**
 * Implements hook_node_delete().
 */
function simplenews_scheduler_node_delete($node) {
  db_delete('simplenews_scheduler')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_view().
 */
function simplenews_scheduler_node_view($node) {
  if (isset($node->simplenews_scheduler_edition) && user_access('send scheduled newsletters')) {
    drupal_set_message(t('This is a newsletter edititon. View the the master template of this newsletter <a href="!master_url">here</a>', array('!master_url' => url('node/' . $node->simplenews_edition_parent))));
  }
}

/**
 * Implements hook_cron().
 *
 * Essentially we are just checking against a status table
 * and cloning the node into edition nodes which will be sent.
 */
function simplenews_scheduler_cron() {
  // Get the newsletters that need to be sent at this time.
  $now_time = gmmktime();
  $newsletters_to_send = simplenews_scheduler_get_newsletters_due($now_time);
  foreach ($newsletters_to_send as $row) {
      $pid = $row->nid;
      $seconds = $row->seconds;

      // If returns with null don't do anything.
      $first_run = intval($row->start_date);

      // Because the scheduler runs according to last_run timestamp and the cron
      // does not run exactly at the scheduled timestamp, this correction fixes
      // this run's timestamp ($now_time) to the right time by adding a correct interval.
      $interval_duration = $seconds * $row->interval_frequency;
      $this_run = $first_run + floor(($now_time - $first_run) / $interval_duration) * $interval_duration;

      // Create a new edition.
      $eid = _simplenews_scheduler_new_edition($row->nid);

      if (isset($eid)) {
        // persist last_run
        db_update('simplenews_scheduler')
          ->fields(array('last_run' => $this_run))
          ->condition('nid', $pid)
          ->execute();

        // Send the newsletter edition to each subscriber of the parent newsletter.
        $node = node_load($eid);
        module_load_include('inc', 'simplenews', 'includes/simplenews.mail');
        simplenews_add_node_to_spool($node);
      }
  }
}

/**
 * Get the newsletters that need to have new editions sent.
 *
 * This is a helper function for hook_cron that has the current date abstracted
 * out so it can be tested.
 *
 * @param $timestamp
 *   A unix timestamp at which to determine which newsletters are due to be
 *   sent. In ordinary operation this should be the current time.
 *
 * @return
 *  An array of newsletter data arrays in the form of rows from the
 *  {simplenews_scheduler} table, keyed by newsletter nid.
 */
function simplenews_scheduler_get_newsletters_due($timestamp) {
  // Set the default intervals for scheduling.
  $intervals['hour'] = 3600;
  $intervals['day'] = 86400;
  $intervals['week'] = $intervals['day'] * 7;
  $intervals['month'] = $intervals['day'] * date_days_in_month(date('Y'), date('m'));

  $newsletters = array();
  foreach ($intervals as $interval => $seconds) {
    // Check daily items that need to be sent.
    $sql = "SELECT * FROM {simplenews_scheduler} ";
    $sql .= "WHERE activated = :active ";
    $sql .= "AND :now - last_run > :interval ";
    $sql .= "AND send_interval = :frequency ";
    $sql .= "AND start_date <= :now ";
    $sql .= "AND (stop_date > :now OR stop_date = 0)";

    $result = db_query($sql, array(':active' => 1, ':now' => $timestamp, ':interval' => $seconds, ':frequency' => $interval));

    foreach ($result as $row) {
      // does this newsletter have something to evaluate to check running condition?
      if (strlen($row->php_eval)) {
        $eval_result = eval($row->php_eval);
        if (!$eval_result) {
          continue;
        }
      }

      // Add the number of seconds the newsletter's interval represents.
      $row->seconds = $seconds;

      $pid = $row->nid;
      $newsletters[$pid] = $row;
    }
  }
  return $newsletters;
}

/**
 * Function clones a node from the given template newsletter node.
 */
function simplenews_scheduler_clone_node($node) {
  if (isset($node->nid)) {
    $clone = clone $node;

    $clone->nid = NULL;
    $clone->vid = NULL;
    $clone->tnid = NULL;
    $clone->created = NULL;
    $clone->book['mlid'] = NULL;
    $clone->path = NULL;
    //$clone->title = $original_node->title;
    // Add an extra property as a flag.
    $clone->clone_from_original_nid = $node->nid;

    node_save($clone);
    return $clone;
  }
}

/**
 * Menu callback to provide an overview page with the scheduled newsletters.
 *
 * @todo replace the output of this function with a default view that
 * will be provided by the views integration of this module. Code below
 * is ported from D6!
 */
function simplenews_scheduler_node_page($node) {
  drupal_set_title(t('Scheduled newsletter editions'));
  $nid = _simplenews_scheduler_get_pid($node);
  $output = '';
  $rows = array();

  if ($nid == $node->nid) { // This is the template newsletter.
    $output .= '<p>' . t('This is a newsletter template node of which all corresponding editions nodes are based on.') . '</p>';
  }
  else { // This is a newsletter edition.
    $output .= '<p>' . t('This node is part of a scheduled newsletter configuration. View the original newsletter <a href="@parent">here</a>.', array('@parent' => url('node/' . $nid))) . '</p>';
  }

  // Load the corresponding editions from the database to further process.
  $result = db_select('simplenews_scheduler_editions', 's')
    ->extend('PagerDefault')
    ->limit(20)
    ->fields('s')
    ->condition('s.pid', $nid)
    ->execute()
    ->fetchAll();

  foreach ($result as $row) {
    $node = node_load($row->eid);
    $rows[] = array(l($node->title, 'node/' . $row->eid), format_date($row->date_issued, 'custom', 'Y-m-d H:i'));
  }

  // Display a table with all editions.
  $tablecontent = array(
    'header' => array(t('Edition Node'), t('Date sent')),
    'rows' => $rows,
    'attributes' => array('class' => array('schedule-history')),
    'empty' => '<p>' . t('No scheduled newsletter editions have been sent.') . '</p>',
  );
  $output .= theme('table', $tablecontent);
  $output .= theme('pager', array('tags' => 20));

  return $output;
}

/**
 * Check whether to display the Scheduled Newsletter tab.
 */
function _simplenews_scheduler_tab_permission($node) {
  return simplenews_check_node_types($node->type) && user_access('overview scheduled newsletters');
}

/**
 * Find Full HTML input format.
 *
 * Use the Drupal API for finding the Full HTML input format, this is what the subsequent newsletter editions
 * need to be set to.
 */
function _simplenews_scheduler_get_full_html_format() {
  global $user;
  $formats = filter_formats($user);

  foreach ($formats as $index => $format) {
    if (stristr($format->name, 'Full HTML')) {
      return $index;
    }
  }

  return false;
}

/**
 * Create a new newsletter edition based on the master edition of this newsletter.
 */
function _simplenews_scheduler_new_edition($nid) {
  // Check upon if sending should stop with a given edition number.
  $result = db_select('simplenews_scheduler', 's')
    ->fields('s', array('stop_type', 'stop_edition'))
    ->condition('nid', $nid)
    ->execute()
    ->fetchAssoc();
  $stop = $result['stop_type'];
  $stop_edition = $result['stop_edition'];

  $count = db_select('simplenews_scheduler_editions', 'e')
    ->fields('e', array('eid'))
    ->condition('pid', $nid)
    ->execute()
    ->fetchAll();
  $edition_count = count($count);

  // Don't create new edition if the edition number exceeds the given maximum value.
  if (($stop != 2 || $stop == 2 && $edition_count < $stop_edition)) {
    // Load the template node and clone an edition.
    $template_node = node_load($nid);
    $edition_node = simplenews_scheduler_clone_node($template_node);

    // Run the title through token replacement.
    $edition_node->title = token_replace($edition_node->title, array('node' => $edition_node));

    // Let other modules change the cloned node too
    // module_invoke_all('simplenews_scheduler_edition_clone', $edition_node);

    // Invoke hook_simplenews_scheduler_cloned_node_alter() to give installed modules a chance to
    // modify the cloned edition node if necessary before it gets saved.
    drupal_alter('simplenews_scheduler_cloned_node', $node, $node);

    // Save the changes of other modules
    node_save($edition_node);

    // Insert edition data.
    $now_time = REQUEST_TIME;
    $values = array(
      'eid' => $edition_node->nid,
      'pid' => $template_node->nid,
      'date_issued' => $now_time,
    );
    db_insert('simplenews_scheduler_editions')
      ->fields($values)
      ->execute();

    // Save taxonomy terms.
    watchdog('simplenews_sched', 'Saved new node ready to be sent. Node ID: !nid', array(
      '!nid' => $edition_node->nid,
    ));

    // Prepare the correct status for Simplenews to pickup.
    db_update('simplenews_newsletter')
      ->fields(array('status' => 1))
      ->condition('nid', $edition_node->nid)
      ->execute();

    return $edition_node->nid;
  }
}

/**
 * Helper function to get the identifier of newsletter.
 *
 * @param $node
 *  The node object for the newsletter.
 *
 * @return
 *  If the node is a newsletter edition, the node id of its parent template
 *  newsletter; if the node is a template newsletter, its own node id; and
 *  FALSE if the node is not part of a scheduled newsletter set.
 */
function _simplenews_scheduler_get_pid($node) {
  // First assume this is a newsletter edition,
  if (isset($node->simplenews_scheduler_edition)) {
    return $node->simplenews_scheduler_edition->pid;
  }
  // or this itself is the parent newsletter.
  elseif (isset($node->simplenews_scheduler)) {
    return $node->nid;
  }

  return FALSE;
}
